decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
View(accumulatedReturn)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2]) {
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2]){
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4]) {
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4]){
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
#
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
View(accumulatedReturn)
View(accumulatedReturn)
View(data_er)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
colnames(accumulatedReturn)<-c('AccumRet gbp','AccumRet aud','Total Return')
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
# set directory
setwd('G:/Meu Drive/3ยบ Sem/Econometria II/Final Exam')
library(Quandl)
library(xts)
# import key
key <- read.table(file = 'api_key.txt', header = FALSE)
Quandl.api_key(unlist(key))
# import key
key <- read.table(file = 'api_key.txt', header = FALSE)
# import data
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
aud=Quandl( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
#####Creating a New Matrix with both series#############
data=cbind(gbp, aud)
#########Computing the compounded return###############
data_er_ret=diff(log(data))
############Excluding the first observation in the prices######
data_er=ts(data[2:nrow(data),],start=c(1971,2),frequency=12)
##########Time series names#####################
names_data_er=colnames(data_er)
#########Time series date#######################
date=seq(as.Date('1971-02-01'), by= 'month', along=data_er_ret[,1])
######Plot Exchangerate
plot(data_er)
#######Plot returns###########
plot(data_er_ret)
# unit root test
library(tseries)
testList <- cbind(data_er, data_er_ret)
name_testList <- colnames(testList)
Results.adf<- matrix(ncol = 1, nrow = length(name_testList))
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i],
' is a Stationary process with probability ', round(1-aTem$p.value,2)*100,'%')
}else{
Results.adf[i,1] <- paste0( name_testList[i],
' is a Non-stationary process because it has P-valor ', round(aTem$p.value,2), ' >5%')
}
}
View(Results.adf)
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i],
' is a Stationary process because it has P-valor ', round(1-aTem$p.value,2)*100,'%')
}else{
Results.adf[i,1] <- paste0( name_testList[i],
' is a Non-stationary process because it has P-valor ', round(aTem$p.value,2), '%')
}
}
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i],
' is a Stationary process because it has P-valor ', round(aTem$p.value,2),'%')
}else{
Results.adf[i,1] <- paste0( name_testList[i],
' is a Non-stationary process because it has P-valor ', round(aTem$p.value,2), '%')
}
}
rm(aTem, aud, gbp, testList)
# lags select - var criteria
library(vars)
varModel<-VARselect(data_er_ret, type = 'const', lag.max = 12)
nlag<- min(varModel$selection[1],varModel$selection[3])
# estimate VECM model and testing whether the series are cointegrated
if (nlag < 2) {K <- 2 # adjusting the lags for the VECM model
}else{                # K cannot be equal to 1
K<- nlag
}
library(tsDyn)
vecmModel<-VECM(data_er_ret, lag = K-1, estim = 'ML')
summary(vecmModel)
a<-tsDyn::rank.test(vecmModel, cval = 0.05)
summary(a)
rm(a)
cointTest<-tsDyn::rank.test(vecmModel, cval = 0.05)
summary(cointTest)
# forecast - one spep forward
h=1
t<-120
T<-length(data_er_ret[,1])-t
forecastRet<-matrix(ncol=4, nrow = length(data_er_ret[,1]))
forecastRet[,1:2]<-data_er_ret
for (i in 1:T) {
forecastRet[t+i,3:4]<-predict(VECM(data_er_ret[1:t+i,], lag = K-1, estim = 'ML'), n.ahead = h)
}
colnames(forecastRet)<- c('gbpRet', 'audRet', 'gbpRet h+1','audRet h+1')
forecastRet<-ts(forecastRet)
forecastRet<-as.xts(forecastRet)
forecastRetTemp<-forecastRet
forecastRetTemp[,3]<-forecastRet[,2]
forecastRetTemp[,2]<-forecastRet[,3]
forecastRet<-forecastRetTemp
colnames(forecastRet)<- c('gbpRet', 'gbpRet h+1', 'audRet', 'audRet h+1')
rm(forecastRetTemp)
plot.xts(forecastRet[t:T,1:2], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(forecastRet[t:T,3:4], grid.col = FALSE, main ='', legend.loc = 3)
date[t:T]
index(forecastRet)<-date[t:T]
View(forecastRet)
rownames(forecastRet)<-date[t:T]
View(forecastRet)
date[t:T]
library(xts)
rownames(forecastRet)<-date[t:T]
View(forecastRet)
index(forecastRet)<-date
View(forecastRet)
plot.xts(forecastRet[t:T,1:2], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(forecastRet[t:T,3:4], grid.col = FALSE, main ='', legend.loc = 3)
decision<-matrix(ncol = 6, nrow = T)
decision[1,1:4]<-1 # recovery initial prices and set projection prices
View(decision)
forecastRetTemp<-na.omit(forecastRet)
for (i in 2:T) {
decision[i,1:4]<-decision[i-1,1:4]*(1+forecastRetTemp[i,])
}
colnames(decision)<- c('gbp', 'gbp h+1', 'aud', 'aud h+1','gbp decision','aud decision')
View(decision)
decision<-matrix(ncol = 8, nrow = T)
decision[1,1:4]<-1 # recovery initial prices and set projection prices
View(decision)
forecastRetTemp<-na.omit(forecastRet)
for (i in 2:T) {
decision[i,1:4]<-decision[i-1,1:4]*(1+forecastRetTemp[i,])
}
colnames(decision)<- c('gbp', 'gbp h+1', 'aud', 'aud h+1',
'gbp decision 1','aud decision 1',
'gbp decision 2','aud decision 2')
View(decision)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2]) {
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2]){
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4]) {
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4]){
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
View(decision)
# determining ratio of assets
library(TTR)
ratio<-data_er[,1]/data_er[,2]
ratio<-cbind(ratio, SMA(ratio, n=5))
ratio<-as.xts(ts(ratio))
colnames(ratio)<-c('ratio','MAratio')
plot.xts(ratio, legend.loc = 1)
index(ratio)<-date
plot.xts(ratio, legend.loc = 1)
plot.xts(ratio, legend.loc = 1, grid.col = FALSE)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,7]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,7]<--1
}else{
decision[i,7]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,8]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,8]<--1
}else{
decision[i,8]<-0
}
}
View(decision)
plot.ts(decision[,5:8])
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
View(accumulatedReturn)
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
View(accumulatedReturn)
rStar<- cbind(rStar_gbp, rStar_aud,6*5)
View(rStar)
rStar<- cbind(decision[,5]*forecastRetTemp[,1],
decision[,6]*forecastRetTemp[,3],
decision[,7]*forecastRetTemp[,1],
decision[,8]*forecastRetTemp[,3])
View(rStar)
rm(rStar)
rStar<- cbind(decision[,5]*forecastRetTemp[,1],
decision[,6]*forecastRetTemp[,3],
decision[,7]*forecastRetTemp[,1],
decision[,8]*forecastRetTemp[,3])
View(rStar)
colnames(rStar)<- c('rStar_gbp_decision1','rStar_aud_decision1',
'rStar_gbp_decision2','rStar_aud_decision2')
View(rStar)
rm(rStar_gbp)
rm(rStar_aud)
plot(rStar)
plot(rStar[,1:2])
plot(rStar[,3:4])
plot.ts(rStar[,1:2])
plot.ts(rStar[,1:2])
plot(rStar[,1:2])
par(mfrow=c(1,2))
plot(rStar[,1:2])
plot(rStar[,3:4])
plot(rStar[,1:2], main = 'decision 1')
plot(rStar[,3:4], main = 'decision 2')
plot(rStar[,1:2], main = 'decision 1', legend = 1)
?plot
plot(rStar[,1:2], main = 'decision 1', sub = 1)
plot(rStar[,1:2], main = 'decision 1', sub = "hhh")
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 6)
accumulatedReturn[1,1:4]<-initialInvestment
View(accumulatedReturn)
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,1:2])
accumulatedReturn[i,3:4]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,3:4])
}
View(accumulatedReturn)
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,1:2])
accumulatedReturn[i,3:4]<-accumulatedReturn[i-1,3:4]*(1+rStar[i,3:4])
}
View(accumulatedReturn)
accumulatedReturn[,5]<-accumulatedReturn[,1]+accumulatedReturn[,2]
accumulatedReturn[,6]<-accumulatedReturn[,3]+accumulatedReturn[,4]
View(accumulatedReturn)
colnames(accumulatedReturn)<-c('AccumRet gbp d1','AccumRet aud d1',
'AccumRet gbp d2','AccumRet aud d2',
'Total Return d1', 'Total Return d2')
View(accumulatedReturn)
plot.ts(accumulatedReturn)
accumulatedReturnTemp<-as.xts(ts(accumulatedReturn))
View(accumulatedReturn)
index(accumulatedReturnTemp)<-date
index(accumulatedReturnTemp)<-date[t:T]
date[t:T]
length(date[t:T])
length(accumulatedReturnTemp[,1])
length(date[T]
length(date[T])
length(date[1:T])
index(accumulatedReturnTemp)<-length(date[1:T])
View(accumulatedReturnTemp)
index(accumulatedReturnTemp)<-date[1:T]
View(accumulatedReturnTemp)
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 3)
par(mfrow=c(1,3))
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 2)
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1)
View(accumulatedReturn)
plot.xts(accumulatedReturnTemp[,-2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1:3], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1:3:-2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1;3], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1:6], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1:4], grid.col = FALSE, main ='', legend.loc = 1)
View(forecastRetTemp)
View(decision)
View(accumulatedReturn)
colnames(accumulatedReturn)<-c('AcRet gbp d1','AcRet aud d1',
'AcRet gbp d2','AcRet aud d2',
'Total Return d1', 'Total Return d2')
View(rStar)
rStar<- cbind(decision[,5]*forecastRetTemp[,1],
decision[,7]*forecastRetTemp[,1],
decision[,6]*forecastRetTemp[,3],
decision[,8]*forecastRetTemp[,3])
colnames(rStar)<- c('rStar_gbp_decision1','rStar_gbp_decision2',
'rStar_aud_decision1','rStar_aud_decision2')
View(rStar)
par(mfrow=c(1,2))
plot(rStar[,1:2], main = 'decision 1')
plot(rStar[,3:4], main = 'decision 2')
rStar<- cbind(decision[,5]*forecastRetTemp[,1],
decision[,6]*forecastRetTemp[,3],
decision[,7]*forecastRetTemp[,1],
decision[,8]*forecastRetTemp[,3])
colnames(rStar)<- c('rStar_gbp_decision1','rStar_aud_decision1',
'rStar_gbp_decision2','rStar_aud_decision2')
plot(rStar[,1:2], main = 'decision 1')
plot(rStar[,3:4], main = 'decision 2')
accumulatedReturn<-matrix(nrow = T, ncol = 6)
accumulatedReturn[1,1:4]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,1:2])
accumulatedReturn[i,3:4]<-accumulatedReturn[i-1,3:4]*(1+rStar[i,3:4])
}
accumulatedReturn[,5]<-accumulatedReturn[,1]+accumulatedReturn[,2]
accumulatedReturn[,6]<-accumulatedReturn[,3]+accumulatedReturn[,4]
View(accumulatedReturn)
colnames(accumulatedReturn)<-c('AcRet gbp d1','AcRet aud d1',
'AcRet gbp d2','AcumRet aud d2',
'Total Return d1', 'Total Return d2')
plot.ts(accumulatedReturn)
accumulatedReturnTemp<-as.xts(ts(accumulatedReturn))
index(accumulatedReturnTemp)<-date[1:T]
View(accumulatedReturnTemp)
accumulatedReturnTemp[,2]<-accumulatedReturn[,3]
accumulatedReturnTemp[,3]<-accumulatedReturn[,2]
colnames(accumulatedReturnTemp)<-c('AcRet gbp d1','AcRet gbp d2',
'AcRet aud d1','AcumRet aud d2',
'Total Return d1', 'Total Return d2')
par(mfrow=c(1,3))
plot.xts(accumulatedReturnTemp[,1:4], grid.col = FALSE, main ='', legend.loc = 1)
par(mfrow=c(1,3))
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1)
colnames(accumulatedReturnTemp)<-c('AcRet gbp d1','AcRet gbp d2',
'AcRet aud d1','AcRet aud d2',
'Total Return d1', 'Total Return d2')
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1, col='blue')
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1,
col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1,
col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1,
col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1,
col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)#,
#col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1)#,
#col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)#,
#col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1)#,
#col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1,
main='Total Return')
#col=c('blue','red'))
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1,
main='Total Return')
par(mfrow=c(1,3))
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1)
######Plot Exchangerate
plot(data_er)
#######Plot returns###########
plot(data_er_ret)
summary(vecmModel)
summary(cointTest)
plot.xts(forecastRet[t:T,1:2], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(forecastRet[t:T,3:4], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(forecastRet[t:T,1:2], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(forecastRet[t:T,3:4], grid.col = FALSE, main ='', legend.loc = 3)
par(mfrow=c(1,2))
plot.xts(forecastRet[t:T,1:2], grid.col = FALSE, main ='', legend.loc = 3)
plot.xts(forecastRet[t:T,3:4], grid.col = FALSE, main ='', legend.loc = 3)
plot.ts(decision[,5:8])
plot(rStar[,1:2], main = 'decision 1')
plot(rStar[,3:4], main = 'decision 2')
plot.ts(accumulatedReturn)
par(mfrow=c(1,3))
plot.xts(accumulatedReturnTemp[,1:2], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,3:4], grid.col = FALSE, main ='', legend.loc = 1)
plot.xts(accumulatedReturnTemp[,5:6], grid.col = FALSE, main ='', legend.loc = 1)
# determining ratio of assets
library(TTR)
ratio<-data_er[,1]/data_er[,2]
plot.xts(ratio, legend.loc = 1, grid.col = FALSE)
ratio<-cbind(ratio, SMA(ratio, n=5))
ratio<-as.xts(ts(ratio))
colnames(ratio)<-c('ratio','MAratio')
index(ratio)<-date
plot.xts(ratio, legend.loc = 1, grid.col = FALSE)
plot.xts(ratio, legend.loc = 1, grid.col = FALSE)
View(accumulatedReturnTemp)
# set directory
setwd('G:/Meu Drive/3ยบ Sem/Econometria II/Final Exam')
# set directory
setwd('G:/Meu Drive/3ยบ Sem/Econometria II/Final Exam')
getwd()
getwd
