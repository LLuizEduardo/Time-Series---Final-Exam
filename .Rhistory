gbp=Quandl ( 'FRED/DEXUSUK' , type= 't s' , collapse = 'monthly' , order= 'asc' )
aud=Quandl ( 'FRED/DEXUSAL' , type= 't s' , collapse = 'monthly' , order= 'asc' )
library(xts)
gbp=Quandl ( 'FRED/DEXUSUK' , type= 't s' , collapse = 'monthly' , order= 'asc' )
gbp=Quandl ( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
aud=Quandl ( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('9e6dfa74c418480f099c478a0b72f29f'')
gbp=Quandl ( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
aud=Quandl ( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('9e6dfa74c418480f099c478a0b72f29f')
gbp=Quandl ( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('9e6dfa74c418480f099c478a0b72f29f')
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('axEMFAuY9C53yizzzQw1')
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
key <- read.table(file = 'api_key.txt', header = FALSE)
Quandl.api_key(key)
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
key
key[1]
print(key[1])
View(key)
paste0(),"'" key,"'"
paste0("'" key,"'")
character(key)
character(key[1,1])
character(key[1])
plot(gbp)
plot.xts(gbp)
plot.ts(gbp)
aud=Quandl( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
key
typeof(key)
unlist(key)
Quandl.api_key(unlist(key))
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
aud=Quandl( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
data <- cbind(gbp, aud)
View(data)
#########Computing the compounded return ###############
data_er_ret=diff(log (data ) )
############Excluding the first observation in the prices######
data_er=ts(data[2:nrow(data),],start=c(1971,2),frequency=12)
View(data_er)
View(data_er_ret)
##########Time series names#####################
names_data_er=colnames(data_er)
#########Time series date#######################
date=seq(as.Date('1971−02−01'), by= 'month', along=data_er_ret[,1])
######Plot Exchangerate
plot(data_er)
#######Plot returns###########
plot(data_er_ret)
View(data_er)
View(data_er_ret)
############Excluding the first observation in the prices######
data_er=ts(data[2:nrow(data),],start=c(1971,2),frequency=12)
##########Time series names#####################
names_data_er=colnames(data_er)
#########Time series date#######################
date=seq(as.Date('1971−02−01'), by= 'month', along=data_er_ret[,1])
######Plot Exchangerate
plot(data_er)
#######Plot returns###########
plot(data_er_ret)
#
library(tseries)
View(data_er)
tseries::adf.test(data)
tseries::adf.test(data[,1])
tseries::adf.test(data[,1], data[,1])
tseries::adf.test(c(data[,1], data[,1])
tseries::adf.test(c(data[,1], data[,1]))
tseries::adf.test(c(data[,1], data[,2]))
tseries::adf.test(c(data[,1])
tseries::adf.test(data[,1])
tseries::adf.test(data[,1])
tseries::adf.test(data[,2])
View(data_er)
tseries::adf.test(data_er[,1])
tseries::adf.test(data_er[,2])
tseries::adf.test(data_er_ret[,1])
tseries::adf.test(data_er_ret[,2])
suppressMessages(tseries::adf.test(data_er_ret[,1]))
tseries::adf.test(suppressMessages(data_er_ret[,1]))
suppressWarnings(tseries::adf.test(data_er[,1]))
aTem <- suppressWarnings(tseries::adf.test(data_er[,1]))
View(aTem)
if (aTem$p.value < 0.05) {
Results.adf <- 'Stationary process'
}else{
Results.adf <- 'Non-stationary process'
}
Results.adf
testList <- cbind(data_er, data_er_ret)
View(testList)
Results.adf <- paste0( colname(testList[,i]), 'Stationary process')
Results.adf <- paste0( testList[,i], 'Stationary process')
Results.adf <- paste0( testList[,1], 'Stationary process')
Results.adf <- paste0( colnames(testList[,1]), 'Stationary process')
colnames(testList[,1])
colnames(testList)
colnames(testList[2])
colnames(testList[,2])
colnames(testList[[1]])
colnames(testList)
name_testList <- colnames(testList)
Results.adf <- paste0( name_testList[1], 'Stationary process')
Results.adf<- list()
for (1 in length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf <- paste0( name_testList[i], 'is a Stationary process')
}else{
Results.adf <- paste0( name_testList[i], 'is a Non-stationary process')
}
}
Results.adf <- paste0( name_testList[i], 'is a Stationary process')
Results.adf <- paste0( name_testList[1], 'is a Stationary process')
Results.adf <- paste0( name_testList[1], ' is a Non-stationary process')
Results.adf<- list()
Results.adf <- paste0( name_testList[1], ' is a Stationary process')
Results.adf <- paste0( name_testList[2], ' is a Non-stationary process')
Results.adf[1] <- paste0( name_testList[1], ' is a Stationary process')
Results.adf[2] <- paste0( name_testList[2], ' is a Non-stationary process')
Results.adf
for (1 in length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
Results.adf<- list()
for (1 in length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
length(name_testList)
Results.adf<- matrix(ncol = 1, nrow = length(name_testList))
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
View(Results.adf)
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
Results.adf[1,1] <- paste0( name_testList[1], ' is a Stationary process')
Results.adf[2,1] <- paste0( name_testList[2], ' is a Stationary process')
Results.adf[3,1] <- paste0( name_testList[3], ' is a Stationary process')
Results.adf[4,1] <- paste0( name_testList[4], ' is a Stationary process')
View(Results.adf)
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
View(key)
View(Results.adf)
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process with ', 1-aTem$p.value)
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process with', 1-aTem$p.value)
}
}
View(Results.adf)
View(key)
View(testList)
View(Results.adf)
for (i in 1:length(name_testList)) {
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process with P-valor ', round(aTem$p.value,2))
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process with probability ', round(1-aTem$p.value,2))
}
}
View(Results.adf)
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i],
' is a Stationary process with P-valor ', round(1-aTem$p.value,2))
}else{
Results.adf[i,1] <- paste0( name_testList[i],
' is a Non-stationary process with probability ', round(aTem$p.value,2))
}
}
View(Results.adf)
View(Results.adf)
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i],
' is a Stationary process with probability ', round(1-aTem$p.value,2)*100,'%')
}else{
Results.adf[i,1] <- paste0( name_testList[i],
' is a Non-stationary process because it has P-valor ', round(aTem$p.value,2), ' >5%')
}
}
View(Results.adf)
View(Results.adf)
rm(aTem)
library(vars)
VARselect(data_er_ret)
VARselect(data_er_ret, type = 'const', lag.max = 12)
a<-VARselect(data_er_ret, type = 'const', lag.max = 12)
View(a)
mean(a$selection)
mean(a$AIC,a$selection$SC)
mean(a$selection$AIC,a$selection$SC)
mean(a[1][3])
mean(a[1],[3])
a[1]
a[[1]]
a$selection[1]
mean(a$selection[1],a$selection[3])
min(a$selection[1],a$selection[3])
b<-c(1,2,3,4)
mean(b)
min(b)
max(b)
min(a$selection[1],a$selection[3])
nlag<- min(a$selection[1],a$selection[3])
nlag
typeof(nlag)
install.packages('tsDyn')
library(tsDyn)
VECM(data_er_ret, lag = nlag, estim = 'ML')
VECM(data_er_ret, lag = nlag-1, estim = 'ML')
VECM(data_er_ret, if (lag = nlag-1 < 1) {nlag
}else{
lag = nlag-1
} , estim = 'ML')
if (lag = nlag-1 < 1) {nlag
}else{
lag = nlag-1
}
if (nlag-1) < 1) {lag = nlag
}else{
lag = nlag-1
VECM(data_er_ret, if (nlag-1) < 1) {lag = nlag
}else{
lag = nlag-1
} , estim = 'ML')
rm(nlag)
K<- min(a$selection[1],a$selection[3])
K<-if (K < 1) {2
}else{
K
}
K
K<-if (K < 1) {K<-2
}else{
K<-K
}
K
K<- min(a$selection[1],a$selection[3])
K
if (K < 1) {K<-2
}else{
K<-K
}
nlag<- min(a$selection[1],a$selection[3])
K<- if (nlag < 1) {K <- 2
}else{
K<- nlag
}
K
nlag < 1
K<- if (nlag = 1) {K <- 2
}else{
K<- nlag
}
K
K<- if (nlag = 1) {K <- 2
}else{
K<- nlag
}
if (nlag < 2) {K <- 2
}else{
K<- nlag
}
K
VECM(data_er_ret, lag = K-1, estim = 'ML')
o.VECM<-VECM(data_er_ret, lag = K-1, estim = 'ML')
tsDyn::rank.select(o.VECM)
tsDyn::rank.test(o.VECM)
View(o.VECM)
View(o.VECM)
tsDyn::rank.select(o.VECM)
tsDyn::rank.select(o.VECM, lag.max = 10)
tsDyn::rank.select(2)
tsDyn::rank.test(o.VECM, cval = 0.05)
tsDyn::rank.select(data_er_ret, lag.max = 10)
varModel<-VARselect(data_er_ret, type = 'const', lag.max = 12)
rm(a)
rm(b,lag)
a<-tsDyn::rank.test(o.VECM, cval = 0.05)
a1<-tsDyn::rank.select(data_er_ret, lag.max = 10)
View(a)
View(a1)
summary(a)
summary(a1)
summary(o.VECM)
rm(a1)
library(xts)
#
library(tseries)
library(vars)
library(tsDyn)
library(ggplot2)
for (i in 1:T) {
previsao[t+i,3:4]<-predict(VECM(data_er_ret[1:t+i,], lag = K-1, estim = 'ML'), n.ahead = h)
}
for (i in 1:T) {
previsao[t+i,3:4]<-predict(VECM(data_er_ret[1:t+i,], lag = K-1, estim = 'ML'), n.ahead = h)
}
i=1
for (i in 1:T) {
previsao[t+i,3:4]<-predict(VECM(data_er_ret[1:t+i,], lag = K-1, estim = 'ML'), n.ahead = h)
}
predict(VECM(data_er_ret[1:t+i,], lag = K-1, estim = 'ML'), n.ahead = h)
View(data_er_ret)
previsao1<-ts(previsao)
previsao<-matrix(ncol=4, nrow = length(data_er_ret[,1])+h)
previsao<-matrix(ncol=4, nrow = length(data_er_ret[,1])+h)
h=1
t<-120
T<-length(data_er_ret[,1])-t
previsao<-matrix(ncol=4, nrow = length(data_er_ret[,1])+h)
previsao[1:length(data_er_ret[,1]),1:2]<-data_er_ret[1:length(data_er_ret[,1]),1:2]
for (i in 1:T) {
previsao[t+i,3:4]<-predict(VECM(data_er_ret[1:t+i,], lag = K-1, estim = 'ML'), n.ahead = h)
}
View(previsao)
plot.ts(previsao)
ggplot2::ggplot(previsao1, aes( y=previsao[,1]))
previsao1<-ts(previsao)
ggplot2::ggplot(previsao1, aes( y=previsao[,1]))
previsao1<-as.xts(previsao1)
plot.xts(previsao1)
plot.xts(previsao1[,1:2])
plot.xts(previsao1[,1:3])
previsao2<-previsao1
previsao2[,2]<-previsao1[,3]
previsao2[,3]<-previsao1[,2]
View(previsao2)
plot.xts(previsao2[,1:2])
plot.xts(previsao2[t:T,1:2])
plot.xts(previsao2[t:T,3:4])
View(Results.adf)
View(data_er_ret)
acum<-1*(1+data_er_ret)
View(acum)
acum[1,]<-1*(1+data_er_ret)
acum[1,]<-1*(1+data_er_ret)
rm(acum)
acum[1,]<-1*(1+data_er_ret)
acum[1,]<-1*(1+data_er_ret[1,])
acum<-matrix(ncol = 2, nrow = t+T)
acum[1,]<-1*(1+data_er_ret[1,])
View(acum)
acum[1,]<-1
View(acum)
for (i in 2:t+T) {
acum<-i-1*(1+data_er_ret[i,])
}
View(acum)
acum<-matrix(ncol = 2, nrow = t+T)
acum[1,]<-1
i=2
acum<-i-1*(1+data_er_ret[i,])
acum<-matrix(ncol = 2, nrow = t+T)
acum[1,]<-1
for (i in 2:t+T) {
acum[i,]<-i-1*(1+data_er_ret[i,])
}
View(acum)
i=2
acum[i,]<-i-1*(1+data_er_ret[i,])
View(acum)
i=3
acum[i,]<-i-1*(1+data_er_ret[i,])
View(acum)
i=4
acum[i,]<-i-1*(1+data_er_ret[i,])
View(acum)
acum<-matrix(ncol = 2, nrow = t+T)
acum[1,]<-1
for (i in 2:t+T) {
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
}
View(acum)
i=2
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
View(acum)
i=3
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
View(acum)
i=4
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
View(acum)
for (i in 2:t+T) {
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
}
View(acum)
t+T
acum<-matrix(ncol = 2, nrow = t+T)
acum[1,]<-1
for (i in 2:t+T) {
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
}
for (i in 1:t+T) {
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
}
View(acum)
for (i in 1:608) {
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
}
for (i in 1:609) {
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
}
for (i in 2:609) {
acum[i,]<-acum[i-1,]*(1+data_er_ret[i,])
}
View(acum)
acum1<-as.xts(acum)
acum1<-as.xts(ts(acum))
plot.xts(acum1)
cor(aud,gpb)
cor(aud,gbp)
View(acum)
View(acum1)
1:T
View(previsao2)
View(previsao1)
plot.xts(previsao2[t:T,3:4])
decision<-matrix(ncol = 6, nrow = t+T)
View(decision)
acum[1,1:2]<-1
decision[1,1:2]<-1
View(decision)
for (i in 2:609) {
decision[i,1:2]<-acum[i-1,]*(1+data_er_ret[i,])
}
View(data_er_ret)
View(data_er)
View(data)
# set directory
setwd('G:/Meu Drive/3º Sem/Econometria II/Final Exam')
