paste0('A meior probabilidade é que ocorra ', min(estado1), ' e ', min(estado2), ' com ', min(estado1)*min(estado2)*100 , ' %')
# qual a probabilidade de se manter no estado 1?
paste0('A probabilidade é igual a ', estado1[1]*estado1[2]*100 , ' %')
# qual a probabilidade de se manter no estado 2?
paste0('A probabilidade é igual a ', estado2[1]*estado2[2]*100 , ' %')
ym
s1<-rbinom(500, 1, 0.7)
View(s1)
head(s1)
epsilon <- rnorm(500)
for (i in 1:length(s1)) {
if (s1 = 1) {
ym <- 1+epsilon
s11<- rbinom(500, 1, 0.7)
}else{
ym <- -1+epsilon
s21<- rbinom(500, 1, 0.9)
}
}
plot.ts(ym)
plot(function(x) dnorm(x, -1), -4, 4, ylab='f(x)')
plot(function(x) dnorm(x, 1), -4, 4, add=T, col=2)
hist(ym)
acf(Z, lag.max = 12)
pacf(Z, lag.max = 12)
acf(Z, lag.max = 14)
pacf(Z, lag.max = 14)
y=rnorm(1000)
y_1 <- lag(y)
z <- matrix(NA,nrow = 1000, ncol = 2)
for (i in 2:length(y)) {
if (y_1[i]>0) {
z[i,1] <- 0.9*y_1[i]+e[i]
} else{
z[i,1] <- 0.3*y_1[i]+e[i]
}
}
z[,2] <- y
plot.ts(z)
plot.ts(z[400:1000,])
plot(z[,2],z[,1])
summary(z)
hist(z[,1])
hist(z[,2])
hist(z[,1])
Z = na.omit(z[,1]+z[,2])
plot.ts(Z)
acf(Z, lag.max = 14)
pacf(Z, lag.max = 14)
library(quantmod)
getSymbols('INDPRO', src = 'FRED')
plot.xts(periodReturn(INDPRO))
rm(list = ls())
e <- 0.25*rnorm(1000)
yb <- 0.6*lag(e)*lag(y, 2)+e
plot.ts(yb)
y=rnorm(1000)
y_1 <- lag(y)
yb <- 0.6*lag(e)*lag(y, 2)+e
plot.ts(yb)
acf(yb)
pacf(yb)
summary(yb)
adf.test(na.omit(WTB3MA))
getSymbols('WTB3MA', src = 'FRED')
adf.test(na.omit(WTB3MA))
treasury3m<- na.omit(WTB3MA)
for (i in 1:length(treasury3m)) {
if (treasury3m[i,] > 8.5) {
D1 <- diff(log(treasury3m))
} else{
D2 <- diff(log(treasury3m))
}
}
r1 <- diff(log(treasury3m))
r2 <- diff(log(treasury3m),2)
par(mfrow = c(1,2))
plot.ts(D1)
plot.ts(D2)
r1 <- diff(log(treasury3m))
r2 <- diff(log(treasury3m),2)
for (i in 1:length(treasury3m)) {
if (treasury3m[i,] > 8.5) {
D1 <- 1.029 - 0.099*r1 + 0.441*r1 - 0.261*r2 + e
} else{
D2 <- 0.008 - 0.0001*r1 + 0.39*r1 - 0.122*r2 + e
}
}
plot.ts(D1)
plot.ts(D2)
D = D1 + D2
plot.ts(D)
plot.ts(periodReturn(WTB3MA, period = 'quartely'))
plot.ts(periodReturn(WTB3MA, period = 'quarterly'))
lm(treasury3m)
library(vars)
VARselect(treasury3m)
VARselect((periodReturn(WTB3MA, period = 'quarterly'))
return_q_treasury <- (periodReturn(WTB3MA, period = 'quarterly'))
return_q_treasury <- (periodReturn(treasury3m, period = 'quarterly'))
library(vars)
VARselect(return_q_treasury)
s1<-rbinom(500, 1, 0.7)
head(s1)
epsilon <- rnorm(500)
for (i in 1:length(s1)) {
if (s1 = 1) {
ym <- 1+epsilon
s11<- rbinom(500, 1, 0.7)
}else{
ym <- -1+epsilon
s21<- rbinom(500, 1, 0.9)
}
}
plot.ts(ym)
plot(function(x) dnorm(x, -1), -4, 4, ylab='f(x)')
plot(function(x) dnorm(x, 1), -4, 4, add=T, col=2)
hist(ym)
setwd('G:/Meu Drive/3º Sem/Econometria II/atividade2')
read.csv('api_key.txt')
api_key<- read.csv('api_key.txt')
View(api_key)
api_key<- as.list( read.csv('api_key.txt'))
View(api_key)
api_key
api_key[1]
api_key<- as.character.POSIXt( read.csv('api_key.txt'))
View(api_key)
api_key<- as.character( read.csv('api_key.txt'))
api_key<- print( read.csv('api_key.txt'))
api_key<- as.data.frame.list( read.csv('api_key.txt'))
api_key<- as.character.POSIXt( read.csv('api_key.txt'))
api_key<- text( read.csv('api_key.txt'))
data <- read.table(file = 'api_key.txt', header = TRUE)
head(data)
data
data <- read.table(file = 'api_key.txt', header = FALSE)
head(data)
rm(api_key)
rm(data)
key <- read.table(file = 'api_key.txt', header = FALSE)
View(key)
fredr_set_key
library(Quandl)
Quandl.api_key(key)
gbp=Quandl ( 'FRED/DEXUSUK' , type= 't s' , collapse = 'monthly' , order= 'asc' )
aud=Quandl ( 'FRED/DEXUSAL' , type= 't s' , collapse = 'monthly' , order= 'asc' )
library(xts)
gbp=Quandl ( 'FRED/DEXUSUK' , type= 't s' , collapse = 'monthly' , order= 'asc' )
gbp=Quandl ( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
aud=Quandl ( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('9e6dfa74c418480f099c478a0b72f29f'')
gbp=Quandl ( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
aud=Quandl ( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('9e6dfa74c418480f099c478a0b72f29f')
gbp=Quandl ( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('9e6dfa74c418480f099c478a0b72f29f')
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
Quandl.api_key('axEMFAuY9C53yizzzQw1')
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
key <- read.table(file = 'api_key.txt', header = FALSE)
Quandl.api_key(key)
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
key
key[1]
print(key[1])
View(key)
paste0(),"'" key,"'"
paste0("'" key,"'")
character(key)
character(key[1,1])
character(key[1])
plot(gbp)
plot.xts(gbp)
plot.ts(gbp)
aud=Quandl( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
key
typeof(key)
unlist(key)
Quandl.api_key(unlist(key))
gbp=Quandl( 'FRED/DEXUSUK' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
aud=Quandl( 'FRED/DEXUSAL' , type= 'ts' , collapse = 'monthly' , order= 'asc' )
data <- cbind(gbp, aud)
View(data)
#########Computing the compounded return ###############
data_er_ret=diff(log (data ) )
############Excluding the first observation in the prices######
data_er=ts(data[2:nrow(data),],start=c(1971,2),frequency=12)
View(data_er)
View(data_er_ret)
##########Time series names#####################
names_data_er=colnames(data_er)
#########Time series date#######################
date=seq(as.Date('1971−02−01'), by= 'month', along=data_er_ret[,1])
######Plot Exchangerate
plot(data_er)
#######Plot returns###########
plot(data_er_ret)
View(data_er)
View(data_er_ret)
############Excluding the first observation in the prices######
data_er=ts(data[2:nrow(data),],start=c(1971,2),frequency=12)
##########Time series names#####################
names_data_er=colnames(data_er)
#########Time series date#######################
date=seq(as.Date('1971−02−01'), by= 'month', along=data_er_ret[,1])
######Plot Exchangerate
plot(data_er)
#######Plot returns###########
plot(data_er_ret)
#
library(tseries)
View(data_er)
tseries::adf.test(data)
tseries::adf.test(data[,1])
tseries::adf.test(data[,1], data[,1])
tseries::adf.test(c(data[,1], data[,1])
tseries::adf.test(c(data[,1], data[,1]))
tseries::adf.test(c(data[,1], data[,2]))
tseries::adf.test(c(data[,1])
tseries::adf.test(data[,1])
tseries::adf.test(data[,1])
tseries::adf.test(data[,2])
View(data_er)
tseries::adf.test(data_er[,1])
tseries::adf.test(data_er[,2])
tseries::adf.test(data_er_ret[,1])
tseries::adf.test(data_er_ret[,2])
suppressMessages(tseries::adf.test(data_er_ret[,1]))
tseries::adf.test(suppressMessages(data_er_ret[,1]))
suppressWarnings(tseries::adf.test(data_er[,1]))
aTem <- suppressWarnings(tseries::adf.test(data_er[,1]))
View(aTem)
if (aTem$p.value < 0.05) {
Results.adf <- 'Stationary process'
}else{
Results.adf <- 'Non-stationary process'
}
Results.adf
testList <- cbind(data_er, data_er_ret)
View(testList)
Results.adf <- paste0( colname(testList[,i]), 'Stationary process')
Results.adf <- paste0( testList[,i], 'Stationary process')
Results.adf <- paste0( testList[,1], 'Stationary process')
Results.adf <- paste0( colnames(testList[,1]), 'Stationary process')
colnames(testList[,1])
colnames(testList)
colnames(testList[2])
colnames(testList[,2])
colnames(testList[[1]])
colnames(testList)
name_testList <- colnames(testList)
Results.adf <- paste0( name_testList[1], 'Stationary process')
Results.adf<- list()
for (1 in length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf <- paste0( name_testList[i], 'is a Stationary process')
}else{
Results.adf <- paste0( name_testList[i], 'is a Non-stationary process')
}
}
Results.adf <- paste0( name_testList[i], 'is a Stationary process')
Results.adf <- paste0( name_testList[1], 'is a Stationary process')
Results.adf <- paste0( name_testList[1], ' is a Non-stationary process')
Results.adf<- list()
Results.adf <- paste0( name_testList[1], ' is a Stationary process')
Results.adf <- paste0( name_testList[2], ' is a Non-stationary process')
Results.adf[1] <- paste0( name_testList[1], ' is a Stationary process')
Results.adf[2] <- paste0( name_testList[2], ' is a Non-stationary process')
Results.adf
for (1 in length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
Results.adf<- list()
for (1 in length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
length(name_testList)
Results.adf<- matrix(ncol = 1, nrow = length(name_testList))
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
View(Results.adf)
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
Results.adf[1,1] <- paste0( name_testList[1], ' is a Stationary process')
Results.adf[2,1] <- paste0( name_testList[2], ' is a Stationary process')
Results.adf[3,1] <- paste0( name_testList[3], ' is a Stationary process')
Results.adf[4,1] <- paste0( name_testList[4], ' is a Stationary process')
View(Results.adf)
for (1 in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process')
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process')
}
}
View(key)
View(Results.adf)
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process with ', 1-aTem$p.value)
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process with', 1-aTem$p.value)
}
}
View(Results.adf)
View(key)
View(testList)
View(Results.adf)
for (i in 1:length(name_testList)) {
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i], ' is a Stationary process with P-valor ', round(aTem$p.value,2))
}else{
Results.adf[i,1] <- paste0( name_testList[i], ' is a Non-stationary process with probability ', round(1-aTem$p.value,2))
}
}
View(Results.adf)
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i],
' is a Stationary process with P-valor ', round(1-aTem$p.value,2))
}else{
Results.adf[i,1] <- paste0( name_testList[i],
' is a Non-stationary process with probability ', round(aTem$p.value,2))
}
}
View(Results.adf)
View(Results.adf)
for (i in 1:length(name_testList)) {
aTem <- suppressWarnings(tseries::adf.test(testList[,i]))
if (aTem$p.value < 0.05) {
Results.adf[i,1] <- paste0( name_testList[i],
' is a Stationary process with probability ', round(1-aTem$p.value,2)*100,'%')
}else{
Results.adf[i,1] <- paste0( name_testList[i],
' is a Non-stationary process because it has P-valor ', round(aTem$p.value,2), ' >5%')
}
}
View(Results.adf)
View(Results.adf)
rm(aTem)
library(vars)
VARselect(data_er_ret)
VARselect(data_er_ret, type = 'const', lag.max = 12)
a<-VARselect(data_er_ret, type = 'const', lag.max = 12)
View(a)
mean(a$selection)
mean(a$AIC,a$selection$SC)
mean(a$selection$AIC,a$selection$SC)
mean(a[1][3])
mean(a[1],[3])
a[1]
a[[1]]
a$selection[1]
mean(a$selection[1],a$selection[3])
min(a$selection[1],a$selection[3])
b<-c(1,2,3,4)
mean(b)
min(b)
max(b)
min(a$selection[1],a$selection[3])
nlag<- min(a$selection[1],a$selection[3])
nlag
typeof(nlag)
install.packages('tsDyn')
library(tsDyn)
VECM(data_er_ret, lag = nlag, estim = 'ML')
VECM(data_er_ret, lag = nlag-1, estim = 'ML')
VECM(data_er_ret, if (lag = nlag-1 < 1) {nlag
}else{
lag = nlag-1
} , estim = 'ML')
if (lag = nlag-1 < 1) {nlag
}else{
lag = nlag-1
}
if (nlag-1) < 1) {lag = nlag
}else{
lag = nlag-1
VECM(data_er_ret, if (nlag-1) < 1) {lag = nlag
}else{
lag = nlag-1
} , estim = 'ML')
rm(nlag)
K<- min(a$selection[1],a$selection[3])
K<-if (K < 1) {2
}else{
K
}
K
K<-if (K < 1) {K<-2
}else{
K<-K
}
K
K<- min(a$selection[1],a$selection[3])
K
if (K < 1) {K<-2
}else{
K<-K
}
nlag<- min(a$selection[1],a$selection[3])
K<- if (nlag < 1) {K <- 2
}else{
K<- nlag
}
K
nlag < 1
K<- if (nlag = 1) {K <- 2
}else{
K<- nlag
}
K
K<- if (nlag = 1) {K <- 2
}else{
K<- nlag
}
if (nlag < 2) {K <- 2
}else{
K<- nlag
}
K
VECM(data_er_ret, lag = K-1, estim = 'ML')
o.VECM<-VECM(data_er_ret, lag = K-1, estim = 'ML')
tsDyn::rank.select(o.VECM)
tsDyn::rank.test(o.VECM)
View(o.VECM)
View(o.VECM)
tsDyn::rank.select(o.VECM)
tsDyn::rank.select(o.VECM, lag.max = 10)
tsDyn::rank.select(2)
tsDyn::rank.test(o.VECM, cval = 0.05)
tsDyn::rank.select(data_er_ret, lag.max = 10)
varModel<-VARselect(data_er_ret, type = 'const', lag.max = 12)
rm(a)
rm(b,lag)
a<-tsDyn::rank.test(o.VECM, cval = 0.05)
a1<-tsDyn::rank.select(data_er_ret, lag.max = 10)
View(a)
View(a1)
summary(a)
summary(a1)
summary(o.VECM)
rm(a1)
