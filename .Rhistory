initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] ){#& ratio[t+i,1]<ratio[t+i,2]
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] ){#& ratio[t+i,1]>ratio[t+i,2]
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] ) {#& ratio[t+i,1]>ratio[t+i,2]
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] ){#& ratio[t+i,1]<ratio[t+i,2]
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] ) {#& ratio[t+i,1]>ratio[t+i,2]
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] ){#& ratio[t+i,1]<ratio[t+i,2]
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] ){#& ratio[t+i,1]<ratio[t+i,2]
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] ){#& ratio[t+i,1]>ratio[t+i,2]
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]>ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] ){#& ratio[t+i,1]<ratio[t+i,2]
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] ){#& ratio[t+i,1]>ratio[t+i,2]
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
plot.xts(ratio, legend.loc = 1)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] ){#& ratio[t+i,1]>ratio[t+i,2]
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] ){#& ratio[t+i,1]<ratio[t+i,2]
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
View(accumulatedReturn)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
View(accumulatedReturn)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2]) {
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2]){
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4]) {
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4]){
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
#
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
View(accumulatedReturn)
View(accumulatedReturn)
View(data_er)
for (i in 2:T) {
if (decision[i-1,1]<decision[i,2] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,5]<-1
}else if(decision[i-1,1]>decision[i,2] & ratio[t+i,1]<ratio[t+i,2]){#
decision[i,5]<--1
}else{
decision[i,5]<-0
}
if (decision[i-1,3]<decision[i,4] & ratio[t+i,1]<ratio[t+i,2]) {#
decision[i,6]<-1
}else if(decision[i-1,3]>decision[i,4] & ratio[t+i,1]>ratio[t+i,2]){#
decision[i,6]<--1
}else{
decision[i,6]<-0
}
}
#plot.ts(decision[,5:6])
# expected return
rStar_gbp<-decision[,5]*forecastRetTemp[,1]
rStar_aud<-decision[,6]*forecastRetTemp[,3]
rStar<- cbind(rStar_gbp, rStar_aud)
# par(mfrow=c(1,2))
# plot.ts(rStar_gbp)
# plot.ts(rStar_aud)
#
# mean(rStar_gbp)
# mean(rStar_aud)
# accumulated return
initialInvestment<-1
accumulatedReturn<-matrix(nrow = T, ncol = 3)
accumulatedReturn[1,1:2]<-initialInvestment
for (i in 2:T) {
accumulatedReturn[i,1:2]<-accumulatedReturn[i-1,1:2]*(1+rStar[i,])
}
accumulatedReturn[,3]<-accumulatedReturn[,1]+accumulatedReturn[,2]
colnames(accumulatedReturn)<-c('AccumRet gbp','AccumRet aud','Total Return')
plot.ts(accumulatedReturn)
#   -----------------------------------------------------------------------
# testing others models
